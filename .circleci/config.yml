version: 2.1

commands:
  install-docker-buildx:
    description: Install Docker Buildx
    parameters:
      docker-tag:
        type: string
    steps:
      - run:
          name: Install Docker Buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L "https://github.com/docker/buildx/releases/download/v0.10.4/buildx-v0.10.4.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx version
            sudo apt-get update && sudo apt-get install -y binfmt-support qemu-user-static
            docker run --rm --privileged tonistiigi/binfmt --install arm64
            docker context create buildcontext
            docker buildx create --name joyful-<< parameters.docker-tag >>- --append buildcontext --use

executors:
  docker-publisher:
    docker:
      # https://github.com/CircleCI-Public/cimg-base
      - image: cimg/base:current

jobs:
  test:
    docker:
      - image: allfunc/terratest
    steps:
      - checkout
      - setup_remote_docker:
          # https://circleci.com/docs/building-docker-images/#docker-version
          version: 20.10.24
          docker_layer_caching: true
      - run:
          name: "Test with terratest"
          command: |
            go test -timeout 30m -v ./tests | tee test_output.log
            terratest_log_parser -testlog test_output.log -outputdir test_output
      - store_test_results:
          path: test_output
  build-and-publish:
    parameters:
      docker-tag:
        type: string
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Log time
          command: date
      - run:
          name: Gen Docker file
          command: |
            VER_PREFIX=$(support/VER_PREFIX.sh)
            DOCKER_FILES=$(support/DOCKER_FILES.sh)
            BUILD_FOLDER=${VER_PREFIX}-<< parameters.docker-tag >>
            ./support/build-multi.sh << parameters.docker-tag >>
            ls -la ${BUILD_FOLDER}
            for file in $DOCKER_FILES; do
              echo ""
              echo "###"
              echo "# --- Dockerfile ($file) Content ---"
              echo "###"
              echo ""
              cat ${BUILD_FOLDER}/$file
              echo ""
            done
      - install-docker-buildx:
          docker-tag: << parameters.docker-tag >>
      - run:
          name: build Docker image
          command: |
            VER_PREFIX=$(support/VER_PREFIX.sh)
            VERSION=$(support/VERSION.sh)
            ALT_VERSION=$(support/ALT_VERSION.sh)
            IMAGE_NAME=$(DOCKER_HUB=1 support/remoteImage.sh)
            BUILD_VERSION=<< parameters.docker-tag >>
            BUILD_FOLDER=${VER_PREFIX}-<< parameters.docker-tag >>
            BUILD_ARG="--build-arg BUILDKIT_INLINE_CACHE=1"
            LATEST_TAG=""
            if [ "x8.0" == "x$BUILD_VERSION" ]; then
                if [ -n "${ALT_VERSION}" ]; then
                  BUILD_ARG="--build-arg ALT_VERSION=${ALT_VERSION}"
                  docker pull php:${BUILD_VERSION}-${ALT_VERSION:-fpm-alpine}
                else
                  docker pull php:${BUILD_VERSION}-fpm-alpine
                fi
            else
              docker pull php:${BUILD_VERSION}-fpm-alpine
            fi
            if [ "x$VERSION" == "x$BUILD_VERSION" ]; then
                LATEST_TAG="-t $IMAGE_NAME:latest"
            fi
            docker pull $IMAGE_NAME:${BUILD_VERSION}
            docker pull smizy/libsvm 
            docker buildx inspect --bootstrap
            echo "Build ARGS: ${BUILD_ARG}" 
            echo "# ------ Start to Login ------ #"
            ./compile.sh login
            DOCKER_BUILDKIT=1 docker buildx build ${BUILD_ARG} -f ${BUILD_FOLDER}/Dockerfile \
              --cache-to=type=inline,mode=all \
              --cache-from $IMAGE_NAME:${BUILD_VERSION} \
              --push \
              --progress=plain \
              --platform linux/amd64,linux/arm64/v8 \
              -t $IMAGE_NAME:${BUILD_VERSION} ${LATEST_TAG} \
              ./${BUILD_FOLDER}
            ./compile.sh updateDockerHubDesc
      - run:
          name: logout
          command: docker logout
  trigger-pmvc:
    executor: docker-publisher
    steps:
      - run:
          name: Trigger pmvc to test docker image
          ##
          # 1. Create Token
          # https://app.circleci.com/settings/user/tokens
          # 2. Add Environment CIRCLE_TOKEN
          # https://app.circleci.com/settings/project/github/pmvc/docker-pmvc-phpunit/environment-variables
          ##
          command: |
            curl -X POST --url https://circleci.com/api/v2/project/github/pmvc/pmvc/pipeline \
               --header "Content-Type: application/json" \
               --header "Circle-Token: $CIRCLE_TOKEN"

workflows:
  run-job:
    jobs:
      - test
      - build-and-publish:
          requires:
            - test
          matrix:
            parameters:
              docker-tag:
                ["8.2", "8.1", "8.0", "7.4", "7.3", "7.2", "7.1", "7.0", "5.6"]
      - trigger-pmvc:
          requires:
            - build-and-publish
  nightly:
    jobs:
      - trigger-pmvc
    triggers:
      - schedule:
          cron: "0 0 1 * *"
          filters:
            branches:
              only:
                - main
